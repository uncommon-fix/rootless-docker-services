---
- name: Generate prompt message
  set_fact:
    prompt_message: "{{ prompt_messages[field_type] | default('Enter ' + current_field_name) }}"
  vars:
    prompt_messages:
      string: "Enter {{ current_field_name }}"
      password: "Enter {{ current_field_name }} (hidden input)"
      boolean: "Enable {{ current_field_name }}? (true/false)"
      ip: "Enter {{ current_field_name }} (IPv4 or IPv6 address)"
      email: "Enter {{ current_field_name }} (email address)"
      url: "Enter {{ current_field_name }} (URL)"
      port: "Enter {{ current_field_name }} (port number 1-65535)"

- name: Prompt for password field
  pause:
    prompt: "{{ prompt_message }}"
    echo: false
  register: password_input
  when: field_type == "password"

- name: Prompt for non-password field
  pause:
    prompt: "{{ prompt_message }}"
  register: regular_input
  when: field_type != "password"

- name: Set user input value from password field
  set_fact:
    input_value: "{{ password_input.user_input }}"
  when: password_input is defined and not password_input.skipped | default(false)

- name: Set user input value from regular field
  set_fact:
    input_value: "{{ regular_input.user_input }}"
  when: regular_input is defined and not regular_input.skipped | default(false)

- name: Validate input
  fail:
    msg: "{{ validation_messages[field_type] | default('Invalid input') }}"
  vars:
    validation_messages:
      string: "Value cannot be empty"
      password: "Password cannot be empty"
      boolean: "Please enter: true or false"
      ip: "Please enter a valid IPv4 or IPv6 address"
      email: "Please enter a valid email address"
      url: "Please enter a valid URL (http:// or https://)"
      port: "Please enter a valid port number (1-65535)"
  when: >
    input_value is defined and (
      (field_type == "string" and input_value == "") or
      (field_type == "password" and input_value == "") or
      (field_type == "boolean" and input_value not in ["true", "false", "yes", "no", "y", "n"]) or
      (field_type == "email" and not (input_value | regex_search('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'))) or
      (field_type == "port" and not (input_value | regex_search('^[0-9]+$') and input_value | int >= 1 and input_value | int <= 65535))
    )

- name: Normalize boolean values
  set_fact:
    normalized_input: "{{ 'true' if input_value.lower() in ['true', 'yes', 'y'] else 'false' }}"
  when: field_type == "boolean" and input_value is defined

- name: Set field value
  set_fact:
    field_value: "{{ normalized_input if (field_type == 'boolean' and normalized_input is defined) else input_value }}"
  when: input_value is defined
