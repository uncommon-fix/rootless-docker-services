---
- name: Validate service name is provided
  fail:
    msg: "Service name must be provided via service_name variable"
  when: service_name is not defined or service_name == ""

- name: Check if service configuration exists
  stat:
    path: "{{ role_path }}/configs/{{ service_name }}/service.yml"
  register: service_config_check

- name: List available services if requested service not found
  find:
    paths: "{{ role_path }}/configs"
    file_type: directory
  register: available_services
  when: not service_config_check.stat.exists

- name: Fail if service not found
  fail:
    msg: |
      Service '{{ service_name }}' not found.

      Available services:
      {% for service in available_services.files | map(attribute='path') | map('basename') | sort %}
      - {{ service }}
      {% endfor %}
  when: not service_config_check.stat.exists

- name: Load service metadata
  include_vars:
    file: "{{ role_path }}/configs/{{ service_name }}/service.yml"
    name: service_metadata

- name: Check if service config template exists
  stat:
    path: "{{ role_path }}/configs/{{ service_name }}/config.json"
  register: service_config_template_check

- name: Load service config template
  set_fact:
    config_template: "{{ lookup('file', role_path + '/configs/' + service_name + '/config.json') | from_json }}"
  when: service_config_template_check.stat.exists

- name: Set service version to default if not provided
  set_fact:
    target_service_version: "{{ service_version | default(service_metadata.default_version) }}"

- name: Validate selected version is available
  fail:
    msg: |
      Version '{{ target_service_version }}' is not available for {{ service_metadata.name }}.
      Available versions: {{ service_metadata.available_versions | join(', ') }}
  when: target_service_version not in service_metadata.available_versions

- name: Display service information
  debug:
    msg: |
      Installing Service: {{ service_metadata.name }}
      Version: {{ target_service_version }}
      Description: {{ service_metadata.description }}

- name: Check for service conflicts
  fail:
    msg: |
      Cannot install {{ service_metadata.name }}
      Conflicts with already installed service: {{ conflict_service }}
  vars:
    installed_services: "{{ ansible_local.services | default({}) | list }}"
    conflict_service: "{{ installed_services | intersect(service_metadata.dependencies.conflicts | default([])) | first }}"
  when:
    - service_metadata.dependencies.conflicts | default([]) | length > 0
    - installed_services | intersect(service_metadata.dependencies.conflicts | default([])) | length > 0

- name: Check required dependencies
  fail:
    msg: |
      Missing required dependency: {{ missing_dep }}
      Please install {{ missing_dep }} first or ensure it's available.
  vars:
    missing_dep: "{{ service_metadata.dependencies.required | default([]) | difference(ansible_local.services | default({}) | list) | first }}"
  when:
    - service_metadata.dependencies.required | default([]) | length > 0
    - service_metadata.dependencies.required | default([]) | difference(ansible_local.services | default({}) | list) | length > 0

- name: Collect interactive configuration
  include_tasks: collect_config.yml
  when: config_template is defined

- name: Check if service install tasks exist
  stat:
    path: "{{ role_path }}/configs/{{ service_name }}/tasks/install.yml"
  register: install_tasks_check

- name: Execute service installation
  include_tasks: "{{ role_path }}/configs/{{ service_name }}/tasks/install.yml"
  when: install_tasks_check.stat.exists

- name: Store service installation facts
  include_role:
    name: config_secrets
    tasks_from: store_fact.yml
  vars:
    fact_name: "services"
    fact_section: "{{ service_name }}"
    fact_value:
      name: "{{ service_metadata.name }}"
      version: "{{ target_service_version }}"
      status: "installed"
      installed_date: "{{ ansible_date_time.iso8601 }}"
      config: "{{ service_config | default({}) }}"

- name: Display installation complete
  debug:
    msg: |
      âœ“ Successfully installed {{ service_metadata.name }} v{{ target_service_version }}
